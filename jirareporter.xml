<?xml version="1.0" encoding="UTF-8"?>
<project name="jirareporter" default="all">
  
  
  <property file="jirareporter.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.sbas/**"/>
    <exclude name="**/.IJI.*/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/.bundle/**"/>
    <exclude name="**/*.orig/**"/>
    <exclude name="**/*.rbc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.ear"/>
    <include name="*.apk"/>
    <include name="*.zip"/>
    <include name="*.swc"/>
    <include name="*.ane"/>
    <include name="*.egg"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties"/>
    <include name="**/?*.xml"/>
    <include name="**/?*.gif"/>
    <include name="**/?*.png"/>
    <include name="**/?*.jpeg"/>
    <include name="**/?*.jpg"/>
    <include name="**/?*.html"/>
    <include name="**/?*.dtd"/>
    <include name="**/?*.tld"/>
    <include name="**/?*.ftl"/>
    <include name="**/?*.htm"/>
    <include name="**/?*.jsp"/>
    <include name="**/?*.js"/>
  </patternset>
  
  
  <!-- Project Libraries -->
  
  <path id="library.teamcity_open_api_agent.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/agent-api.jar"/>
  </path>
  
  <path id="library.teamcity_open_api_common.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/common-api.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/runtime/runtime-util.jar"/>
  </path>
  
  <path id="library.teamcity_open_api_server.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/server-api.jar"/>
  </path>
  
  <path id="library.teamcity_third-party_common.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/annotations.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/openapi.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/spring.jar"/>
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/util.jar"/>
  </path>
  
  <path id="library.teamcity_third-party_server.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/spring-webmvc.jar"/>
  </path>
  
  <path id="library.tomcat.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/lib/servlet-api.jar"/>
  </path>
  
  
  <!-- Application Server Libraries -->
  <!-- Register Custom Compiler Taskdefs -->
  <property name="javac2.home" value="${idea.home}/lib"/>
  <path id="javac2.classpath">
    <pathelement location="${javac2.home}/javac2.jar"/>
    <pathelement location="${javac2.home}/jdom.jar"/>
    <pathelement location="${javac2.home}/asm4-all.jar"/>
    <pathelement location="${javac2.home}/jgoodies-forms.jar"/>
  </path>
  <target name="register.custom.compilers">
    <taskdef name="javac2" classname="com.intellij.ant.Javac2" classpathref="javac2.classpath"/>
    <taskdef name="instrumentIdeaExtensions" classname="com.intellij.ant.InstrumentIdeaExtensions" classpathref="javac2.classpath"/>
  </target>
  
  <!-- Modules -->
  
  
  <!-- Module jirareporter-common -->
  
  <dirname property="module.jirareporter-common.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.jirareporter-common" value="${compiler.args}"/>
  
  <property name="jirareporter-common.output.dir" value="${module.jirareporter-common.basedir}/out/production/jirareporter-common"/>
  <property name="jirareporter-common.testoutput.dir" value="${module.jirareporter-common.basedir}/out/test/jirareporter-common"/>
  
  <path id="jirareporter-common.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="jirareporter-common.module.production.classpath">
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
  </path>
  
  <path id="jirareporter-common.runtime.production.module.classpath">
    <pathelement location="${jirareporter-common.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
  </path>
  
  <path id="jirareporter-common.module.classpath">
    <pathelement location="${jirareporter-common.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
  </path>
  
  <path id="jirareporter-common.runtime.module.classpath">
    <pathelement location="${jirareporter-common.testoutput.dir}"/>
    <pathelement location="${jirareporter-common.output.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.jirareporter-common">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.jirareporter-common">
    <patternset refid="excluded.from.module.jirareporter-common"/>
  </patternset>
  
  <path id="jirareporter-common.module.sourcepath">
    <dirset dir="${module.jirareporter-common.basedir}/common">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.jirareporter-common" depends="compile.module.jirareporter-common.production,compile.module.jirareporter-common.tests" description="Compile module jirareporter-common"/>
  
  <target name="compile.module.jirareporter-common.production" depends="register.custom.compilers" description="Compile module jirareporter-common; production classes">
    <mkdir dir="${jirareporter-common.output.dir}"/>
    <javac2 destdir="${jirareporter-common.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.jirareporter-common}"/>
      <bootclasspath refid="jirareporter-common.module.bootclasspath"/>
      <classpath refid="jirareporter-common.module.production.classpath"/>
      <src refid="jirareporter-common.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.jirareporter-common"/>
    </javac2>
    
    <copy todir="${jirareporter-common.output.dir}">
      <fileset dir="${module.jirareporter-common.basedir}/common/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.jirareporter-common.tests" depends="register.custom.compilers,compile.module.jirareporter-common.production" description="compile module jirareporter-common; test classes" unless="skip.tests"/>
  
  <target name="clean.module.jirareporter-common" description="cleanup module">
    <delete dir="${jirareporter-common.output.dir}"/>
    <delete dir="${jirareporter-common.testoutput.dir}"/>
  </target>
  
  
  <!-- Module jirareporter-agent -->
  
  <dirname property="module.jirareporter-agent.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.jirareporter-agent" value="${compiler.args}"/>
  
  <property name="jirareporter-agent.output.dir" value="${module.jirareporter-agent.basedir}/out/production/jirareporter-agent"/>
  <property name="jirareporter-agent.testoutput.dir" value="${module.jirareporter-agent.basedir}/out/test/jirareporter-agent"/>
  
  <path id="jirareporter-agent.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="jirareporter-agent.module.production.classpath">
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
    <pathelement location="lib/jira-rest-java-client-1.0.jar" />
    <pathelement location="lib/guava-13.0.jar" />
    <pathelement location="${jirareporter-common.output.dir}"/>
  </path>
  
  <path id="jirareporter-agent.runtime.production.module.classpath">
    <pathelement location="${jirareporter-agent.output.dir}"/>
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
    <path refid="jirareporter-common.runtime.production.module.classpath"/>
  </path>
  
  <path id="jirareporter-agent.module.classpath">
    <pathelement location="${jirareporter-agent.output.dir}"/>
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
    <pathelement location="${jirareporter-common.testoutput.dir}"/>
    <pathelement location="${jirareporter-common.output.dir}"/>
  </path>
  
  <path id="jirareporter-agent.runtime.module.classpath">
    <pathelement location="${jirareporter-agent.testoutput.dir}"/>
    <pathelement location="${jirareporter-agent.output.dir}"/>
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
    <path refid="jirareporter-common.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.jirareporter-agent">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.jirareporter-agent">
    <patternset refid="excluded.from.module.jirareporter-agent"/>
  </patternset>
  
  <path id="jirareporter-agent.module.sourcepath">
    <dirset dir="${module.jirareporter-agent.basedir}/agent">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.jirareporter-agent" depends="compile.module.jirareporter-agent.production,compile.module.jirareporter-agent.tests" description="Compile module jirareporter-agent"/>
  
  <target name="compile.module.jirareporter-agent.production" depends="register.custom.compilers,compile.module.jirareporter-common" description="Compile module jirareporter-agent; production classes">
    <mkdir dir="${jirareporter-agent.output.dir}"/>
    <javac2 destdir="${jirareporter-agent.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.jirareporter-agent}"/>
      <bootclasspath refid="jirareporter-agent.module.bootclasspath"/>
      <classpath refid="jirareporter-agent.module.production.classpath"/>
      <src refid="jirareporter-agent.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.jirareporter-agent"/>
    </javac2>
    
    <copy todir="${jirareporter-agent.output.dir}">
      <fileset dir="${module.jirareporter-agent.basedir}/agent/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.jirareporter-agent.tests" depends="register.custom.compilers,compile.module.jirareporter-agent.production" description="compile module jirareporter-agent; test classes" unless="skip.tests"/>
  
  <target name="clean.module.jirareporter-agent" description="cleanup module">
    <delete dir="${jirareporter-agent.output.dir}"/>
    <delete dir="${jirareporter-agent.testoutput.dir}"/>
  </target>
  
  
  <!-- Module jirareporter-server -->
  
  <dirname property="module.jirareporter-server.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.jirareporter-server" value="${compiler.args}"/>
  
  <property name="jirareporter-server.output.dir" value="${module.jirareporter-server.basedir}/out/production/jirareporter-server"/>
  <property name="jirareporter-server.testoutput.dir" value="${module.jirareporter-server.basedir}/out/test/jirareporter-server"/>
  
  <path id="jirareporter-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="jirareporter-server.module.production.classpath">
    <path refid="library.tomcat.classpath"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
    <path refid="library.teamcity_third-party_server.classpath"/>
    <pathelement location="${jirareporter-common.output.dir}"/>
  </path>
  
  <path id="jirareporter-server.runtime.production.module.classpath">
    <pathelement location="${jirareporter-server.output.dir}"/>
    <path refid="library.tomcat.classpath"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
    <path refid="library.teamcity_third-party_server.classpath"/>
    <path refid="jirareporter-common.runtime.production.module.classpath"/>
  </path>
  
  <path id="jirareporter-server.module.classpath">
    <pathelement location="${jirareporter-server.output.dir}"/>
    <path refid="library.tomcat.classpath"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
    <path refid="library.teamcity_third-party_server.classpath"/>
    <pathelement location="${jirareporter-common.testoutput.dir}"/>
    <pathelement location="${jirareporter-common.output.dir}"/>
  </path>
  
  <path id="jirareporter-server.runtime.module.classpath">
    <pathelement location="${jirareporter-server.testoutput.dir}"/>
    <pathelement location="${jirareporter-server.output.dir}"/>
    <path refid="library.tomcat.classpath"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
    <path refid="library.teamcity_third-party_server.classpath"/>
    <path refid="jirareporter-common.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.jirareporter-server">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.jirareporter-server">
    <patternset refid="excluded.from.module.jirareporter-server"/>
  </patternset>
  
  <path id="jirareporter-server.module.sourcepath">
    <dirset dir="${module.jirareporter-server.basedir}/server">
      <include name="src"/>
      <include name="resources"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.jirareporter-server" depends="compile.module.jirareporter-server.production,compile.module.jirareporter-server.tests" description="Compile module jirareporter-server"/>
  
  <target name="compile.module.jirareporter-server.production" depends="register.custom.compilers,compile.module.jirareporter-common" description="Compile module jirareporter-server; production classes">
    <mkdir dir="${jirareporter-server.output.dir}"/>
    <javac2 destdir="${jirareporter-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.jirareporter-server}"/>
      <bootclasspath refid="jirareporter-server.module.bootclasspath"/>
      <classpath refid="jirareporter-server.module.production.classpath"/>
      <src refid="jirareporter-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.jirareporter-server"/>
    </javac2>
    
    <copy todir="${jirareporter-server.output.dir}">
      <fileset dir="${module.jirareporter-server.basedir}/server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.jirareporter-server.basedir}/server/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.jirareporter-server.tests" depends="register.custom.compilers,compile.module.jirareporter-server.production" description="compile module jirareporter-server; test classes" unless="skip.tests"/>
  
  <target name="clean.module.jirareporter-server" description="cleanup module">
    <delete dir="${jirareporter-server.output.dir}"/>
    <delete dir="${jirareporter-server.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.jirareporter-common, clean.module.jirareporter-agent, clean.module.jirareporter-server, clean.artifact.unpacked_plugin" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.jirareporter-common, compile.module.jirareporter-agent, compile.module.jirareporter-server" description="build all modules"/>
  
  <target name="init.artifacts">
    <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
    <property name="artifact.output.copy_plugin_to_data_directory" value="${path.variable.teamcitydatadirectory}/plugins"/>
    <property name="artifact.output.final_plugin_package" value="${basedir}/out/artifacts/final_plugin_package"/>
    <property name="artifact.output.jirareporter-common.jar" value="${basedir}/out/artifacts/jirareporter_common_jar"/>
    <property name="artifact.output.unpacked_plugin" value="${basedir}/out/artifacts/unpacked_plugin"/>
    <mkdir dir="${artifacts.temp.dir}"/>
    <property name="temp.jar.path.jirareporter.zip" value="${artifacts.temp.dir}/jirareporter.zip"/>
    <property name="temp.jar.path.jirareporter.zip2" value="${artifacts.temp.dir}/1/jirareporter.zip"/>
    <mkdir dir="${artifacts.temp.dir}/1"/>
    <property name="temp.jar.path.jirareporter-common.jar.jar" value="${artifacts.temp.dir}/jirareporter-common.jar.jar"/>
    <property name="temp.jar.path.jirareporter.zip3" value="${artifacts.temp.dir}/2/jirareporter.zip"/>
    <mkdir dir="${artifacts.temp.dir}/2"/>
    <property name="temp.jar.path.jirareporter-agent.jar" value="${artifacts.temp.dir}/jirareporter-agent.jar"/>
    <property name="temp.jar.path.jirareporter-server.jar" value="${artifacts.temp.dir}/jirareporter-server.jar"/>
  </target>
  
  <target name="clean.artifact.unpacked_plugin" description="clean unpacked plugin artifact output">
    <delete dir="${artifact.output.unpacked_plugin}"/>
  </target>
  
  <target name="artifact.copy_plugin_to_data_directory" depends="init.artifacts, artifact.unpacked_plugin" description="Build &#39;copy plugin to data directory&#39; artifact">
    <property name="artifact.temp.output.copy_plugin_to_data_directory" value="${artifacts.temp.dir}/copy_plugin_to_data_directory"/>
    <mkdir dir="${artifact.temp.output.copy_plugin_to_data_directory}"/>
    <zip destfile="${temp.jar.path.jirareporter.zip}">
      <zipfileset dir="${artifact.output.unpacked_plugin}"/>
    </zip>
    <copy file="${temp.jar.path.jirareporter.zip}" tofile="${artifact.temp.output.copy_plugin_to_data_directory}/jirareporter.zip"/>
  </target>
  
  <target name="artifact.final_plugin_package" depends="init.artifacts, artifact.unpacked_plugin" description="Build &#39;final plugin package&#39; artifact">
    <property name="artifact.temp.output.final_plugin_package" value="${artifacts.temp.dir}/final_plugin_package"/>
    <mkdir dir="${artifact.temp.output.final_plugin_package}"/>
    <zip destfile="${temp.jar.path.jirareporter.zip2}">
      <zipfileset dir="${artifact.output.unpacked_plugin}"/>
    </zip>
    <copy file="${temp.jar.path.jirareporter.zip2}" tofile="${artifact.temp.output.final_plugin_package}/jirareporter.zip"/>
  </target>
  
  <target name="artifact.jirareporter-common.jar" depends="init.artifacts, compile.module.jirareporter-common" description="Build &#39;jirareporter-common.jar&#39; artifact">
    <property name="artifact.temp.output.jirareporter-common.jar" value="${artifacts.temp.dir}/jirareporter_common_jar"/>
    <mkdir dir="${artifact.temp.output.jirareporter-common.jar}"/>
    <jar destfile="${temp.jar.path.jirareporter-common.jar.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${jirareporter-common.output.dir}"/>
    </jar>
    <copy file="${temp.jar.path.jirareporter-common.jar.jar}" tofile="${artifact.temp.output.jirareporter-common.jar}/jirareporter-common.jar.jar"/>
  </target>
  
  <target name="artifact.unpacked_plugin" depends="init.artifacts, artifact.jirareporter-common.jar, compile.module.jirareporter-agent, artifact.jirareporter-common.jar, compile.module.jirareporter-server" description="Build &#39;unpacked plugin&#39; artifact">
    <mkdir dir="${artifact.output.unpacked_plugin}"/>
    <jar destfile="${temp.jar.path.jirareporter-agent.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${jirareporter-agent.output.dir}"/>
    </jar>
    <zip destfile="${temp.jar.path.jirareporter.zip3}">
      <zipfileset dir="${artifact.temp.output.jirareporter-common.jar}" prefix="jirareporter/lib"/>
      <zipfileset file="${temp.jar.path.jirareporter-agent.jar}" prefix="jirareporter/lib"/>
    </zip>
    <jar destfile="${temp.jar.path.jirareporter-server.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${jirareporter-server.output.dir}"/>
    </jar>
    <mkdir dir="${artifact.output.unpacked_plugin}/agent"/>
    <copy file="${temp.jar.path.jirareporter.zip3}" tofile="${artifact.output.unpacked_plugin}/agent/jirareporter.zip"/>
    <mkdir dir="${artifact.output.unpacked_plugin}/server"/>
    <copy todir="${artifact.output.unpacked_plugin}/server">
      <fileset dir="${artifact.temp.output.jirareporter-common.jar}"/>
    </copy>
    <copy file="${temp.jar.path.jirareporter-server.jar}" tofile="${artifact.output.unpacked_plugin}/server/jirareporter-server.jar"/>
    <ant antfile="build.xml" target="prepare.plugin.descriptor.file.artifacts" dir="${basedir}">
      <property name="artifact.output.path" value="${artifact.output.unpacked_plugin}"/>
      <property name="source" value="teamcity-plugin.xml"/>
      <property name="dest" value="${artifact.output.path}/teamcity-plugin.xml"/>
      <property name="plugin.vendor" value=""/>
      <property name="plugin.vendor.url" value=""/>
    </ant>
  </target>
  
  <target name="build.all.artifacts" depends="artifact.copy_plugin_to_data_directory, artifact.final_plugin_package, artifact.jirareporter-common.jar, artifact.unpacked_plugin" description="Build all artifacts">
    <mkdir dir="${artifact.output.copy_plugin_to_data_directory}"/>
    <copy todir="${artifact.output.copy_plugin_to_data_directory}">
      <fileset dir="${artifact.temp.output.copy_plugin_to_data_directory}"/>
    </copy>
    <mkdir dir="${artifact.output.final_plugin_package}"/>
    <copy todir="${artifact.output.final_plugin_package}">
      <fileset dir="${artifact.temp.output.final_plugin_package}"/>
    </copy>
    <mkdir dir="${artifact.output.jirareporter-common.jar}"/>
    <copy todir="${artifact.output.jirareporter-common.jar}">
      <fileset dir="${artifact.temp.output.jirareporter-common.jar}"/>
    </copy>
    
    <!-- Delete temporary files -->
    <delete dir="${artifacts.temp.dir}"/>
  </target>
  
  <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>
